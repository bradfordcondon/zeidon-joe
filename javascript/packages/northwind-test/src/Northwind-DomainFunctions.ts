// Default domain functions generated by Zeidon
import { DoubleDomainFunctions, DefaultDomainFunctions } from "@zeidon/domains"
import { Domain, DomainFunctions } from "@zeidon/core"

export const Northwind_DomainFunctions =
    {
        ...DefaultDomainFunctions,
        // App-specific domain functions can go here.
        ...{
            "com.quinsoft.northwind.SampleDomain":
                    function ( domain: Domain ): DomainFunctions { return new SampleDomainFunctions( domain ) }
        }
    };

/**
 * Sample functions for a domain that can convert Fahrenheit, Celsius, and Kelvin
 * depending on the context.  The internal value is always saved as Celsius.
 */
class SampleDomainFunctions extends DoubleDomainFunctions {
    convertExternalValue( value: any, attributeDef: any, context?: any ): any {
        // Use super to get the value as a double.
        let c = super.convertExternalValue( value, attributeDef, context );

        // Now convert to C if context indicates value is F or K.
        switch( context ) {
            case 'Fahrenheit':
            case 'F':
                c = ( c - 32.0 ) * 5.0 / 9.0;
                break;

            case 'Kelvin':
            case 'K':
                c = c - 273.15;
                break;

            case undefined:
            case '':
            case 'C':
            case 'Celsius':
                return c;  // Just return.  This skips the rounding.

            default:
                throw `Unknown SampleDomain context ${context}`
        }

        // Round to nearest tenth.
        return Math.round( c * 10.0 ) / 10.0;
    }

    convertToJsType( c: any, attributeDef: any, context = undefined ): any {
        // Convert from C to value specified by context.
        switch ( context ) {
            case 'Fahrenheit':
            case 'F':
                c = ( c * 9.0 / 5.0 ) + 32.0;
                break;

            case 'Kelvin':
            case 'K':
                c = c + 273.15;
                break;

            case undefined:
            case '':
            case 'C':
            case 'Celsius':
                return c;  // Just return.  This skips the rounding.

            default:
                throw `Unknown SampleDomain context ${context}`
        }

        // Round to nearest tenth.
        return Math.round( c * 10.0 ) / 10.0;
    }
}
